{"version":3,"sources":["webpack:///./src/components/posts.tsx","webpack:///./src/components/wordcloud.tsx","webpack:///./src/components/postmeta.tsx","webpack:///./src/pages/index.tsx"],"names":["PostsStyledWrapper","theme","colors","primary_border","Posts","posts","map","post","node","key","id","to","fields","slug","frontmatter","title","postDate","date","timeToRead","excerpt","WordCloudStyledWrapper","flexBox","WordCloud","items","item","path","label","subLabel","PostmetaStyledWrapper","black_inactive","Postmeta","DateTime","fromISO","toFormat","className","IndexPageStyledWrapper","IndexPage","data","allMarkdownRemark","edges","tags","tagGroups","group","slice","tag","AppPaths","name","totalCount"],"mappings":"+LA0BMA,EAAqB,kBAAH,oBAAG,CAAH,gCAEO,qBAAGC,MAAkBC,OAAOC,iBAFnC,yHAmBXC,EAAkC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAC7C,YAACL,EAAD,KACGK,EAAMC,KAAI,gBAASC,EAAT,EAAGC,KAAH,OACT,kBAAIC,IAAKF,EAAKG,IACZ,sBACE,YAAC,IAAD,CAAMC,GAAIJ,EAAKK,OAAOC,MAAON,EAAKO,YAAYC,QAEhD,YAAC,IAAD,CAAUC,SAAUT,EAAKK,OAAOK,KAAMC,WAAYX,EAAKW,aACtDX,EAAKY,SAAW,qBAAIZ,EAAKY,gB,wHCtC5BC,EAAyB,kBAAH,mBAAG,CAAH,oDAMtB,qBAAGnB,MAAkBoB,YANC,mGAoBfC,EAA0C,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOR,EAAV,EAAUA,MAAV,OACrD,YAACK,EAAD,KACE,sBAAKL,GACL,sBACGQ,EAAMjB,KAAI,SAACkB,GAAD,OACT,kBAAIf,IAAKe,EAAKC,MACZ,YAAC,IAAD,CAAMd,GAAIa,EAAKC,MACZD,EAAKE,MACLF,EAAKG,UAAY,wBAAOH,EAAKG,mB,wHChCpCC,EAAwB,mBAAH,oBAAG,CAAH,gBAEd,qBAAG3B,MAAkBC,OAAO2B,iBAFd,sEAWdC,EAAwC,SAAC,GAAD,IACnDd,EADmD,EACnDA,SACAE,EAFmD,EAEnDA,WAFmD,OAInD,YAACU,EAAD,KACE,wBAAOG,WAASC,QAAQhB,GAAUiB,SAAS,QAC3C,oBAAMC,UAAU,aAAhB,KACA,wBAAOhB,EAAP,mB,6ICJEiB,EAAyB,mBAAH,mBAAG,CAAH,sDAKG,qBAAGlC,MAAkBC,OAAOC,iBAL/B,kIAkFbiC,UA1DiC,SAAC,GAK3C,QAJJC,KAC8BhC,EAG1B,EAHFiC,kBAAqBC,MACDC,EAElB,EAFFC,UAAaC,MAGf,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAK3B,MAAM,SACX,YAACoB,EAAD,KACE,kCACA,YAAC,IAAD,CACEZ,MAAOiB,EAAKG,MAAM,EAAG,IAAIrC,KAAI,SAACsC,GAAD,MAAU,CACrCnB,KAASoB,IAASD,IAAd,IAAqBA,EAAIE,KAC7BpB,MAAOkB,EAAIE,KACXnB,SAAU,IAAIiB,EAAIG,WAAV,QAEVhC,MAAM,WAER,mBAAKmB,UAAU,cACb,sCACA,YAAC,IAAD,CAAO7B,MAAOA","file":"component---src-pages-index-tsx-0965b6a38892fcbda8e9.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport { Link, graphql } from 'gatsby';\n\nimport { Postmeta } from './postmeta';\nimport { ThemeProps } from '../lib/theme';\n\nexport interface PostListItemType {\n  excerpt: string;\n  fields: {\n    date: string;\n    slug: string;\n  };\n  frontmatter: {\n    title: string;\n  };\n  id: string;\n  timeToRead: number;\n}\n\nexport interface PostsPropsType {\n  posts: Array<{\n    node: PostListItemType;\n  }>;\n}\n\nconst PostsStyledWrapper = styled.ul<ThemeProps>`\n  > li {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.primary_border};\n    padding: 1rem 0;\n    &:first-of-type {\n      padding-top: 0;\n    }\n    &:last-child {\n      border: none;\n    }\n    > h4 {\n      font-size: 1.25rem;\n    }\n    > p {\n      margin-top: 1rem;\n    }\n  }\n`;\n\nexport const Posts: React.FC<PostsPropsType> = ({ posts }) => (\n  <PostsStyledWrapper>\n    {posts.map(({ node: post }) => (\n      <li key={post.id}>\n        <h4>\n          <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\n        </h4>\n        <Postmeta postDate={post.fields.date} timeToRead={post.timeToRead} />\n        {post.excerpt && <p>{post.excerpt}</p>}\n      </li>\n    ))}\n  </PostsStyledWrapper>\n);\n\nexport const query = graphql`\n  fragment PostList on MarkdownRemark {\n    fields {\n      date\n      slug\n    }\n    frontmatter {\n      title\n    }\n    id\n    excerpt(pruneLength: 200)\n    timeToRead\n  }\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nimport { ThemeProps } from '../lib/theme';\n\ninterface WordCloudPropsType {\n  items: Array<{\n    label: string;\n    path: string;\n    subLabel?: string;\n  }>;\n  title: string;\n}\n\nconst WordCloudStyledWrapper = styled.ul<ThemeProps>`\n  > h3 {\n    font-size: 1.25em;\n    margin-bottom: 0.75rem;\n  }\n  > ul {\n    ${({ theme }) => theme.flexBox()};\n    flex-wrap: wrap;\n    > li {\n      margin: 0 0.5rem 0.5rem 0;\n      > a {\n        > span {\n          font-size: 0.8rem;\n          padding-left: 0.1rem;\n        }\n      }\n    }\n  }\n`;\n\nexport const WordCloud: React.FC<WordCloudPropsType> = ({ items, title }) => (\n  <WordCloudStyledWrapper>\n    <h3>{title}</h3>\n    <ul>\n      {items.map((item) => (\n        <li key={item.path}>\n          <Link to={item.path}>\n            {item.label}\n            {item.subLabel && <span>{item.subLabel}</span>}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  </WordCloudStyledWrapper>\n);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { DateTime } from 'luxon';\n\nimport { ThemeProps } from '../lib/theme';\n\ninterface PostmetaPropsType {\n  postDate: string;\n  timeToRead: number;\n}\n\nconst PostmetaStyledWrapper = styled.div<ThemeProps>`\n  > span {\n    color: ${({ theme }) => theme.colors.black_inactive};\n    font-size: 0.75rem;\n    font-weight: 700;\n    &.separator {\n      padding: 0 0.5rem;\n    }\n  }\n`;\n\nexport const Postmeta: React.FC<PostmetaPropsType> = ({\n  postDate,\n  timeToRead,\n}) => (\n  <PostmetaStyledWrapper>\n    <span>{DateTime.fromISO(postDate).toFormat('DDD')}</span>\n    <span className=\"separator\">|</span>\n    <span>{timeToRead} minute read</span>\n  </PostmetaStyledWrapper>\n);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { graphql } from 'gatsby';\n\nimport { AppPaths } from '../constants/paths';\nimport { Layout } from '../components/common/layout';\nimport { PostListItemType, Posts } from '../components/posts';\nimport { PostTagType } from '../templates/archive';\nimport { SEO } from '../components/seo';\nimport { ThemeProps } from '../lib/theme';\nimport { WordCloud } from '../components/wordcloud';\n\ninterface IndexPagePropsType {\n  data: {\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PostListItemType;\n      }>;\n    };\n    tagGroups: {\n      group: PostTagType[];\n    };\n  };\n}\n\nconst IndexPageStyledWrapper = styled.div<ThemeProps>`\n  > h2 {\n    font-size: 1.5rem;\n  }\n  > ul {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.primary_border};\n    padding: 1.25rem 0;\n  }\n  > .posts-list {\n    padding: 1.25rem 0;\n    > h3 {\n      font-size: 1.25rem;\n      margin-bottom: 1rem;\n    }\n    > ul {\n      > li {\n        > h4 {\n          font-size: 1.1rem;\n        }\n      }\n    }\n  }\n`;\n\nconst IndexPage: React.FC<IndexPagePropsType> = ({\n  data: {\n    allMarkdownRemark: { edges: posts },\n    tagGroups: { group: tags },\n  },\n}) => {\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <IndexPageStyledWrapper>\n        <h2>Writings</h2>\n        <WordCloud\n          items={tags.slice(0, 15).map((tag) => ({\n            path: `${AppPaths.tag}/${tag.name}`,\n            label: tag.name,\n            subLabel: `(${tag.totalCount})`,\n          }))}\n          title=\"Topics\"\n        />\n        <div className=\"posts-list\">\n          <h3>Recent Posts</h3>\n          <Posts posts={posts} />\n        </div>\n      </IndexPageStyledWrapper>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(\n      filter: { fields: { type: { eq: \"post\" } } }\n      sort: { fields: fields___date, order: DESC }\n      limit: 5\n    ) {\n      edges {\n        node {\n          fields {\n            date\n            slug\n          }\n          frontmatter {\n            title\n          }\n          id\n          timeToRead\n        }\n      }\n    }\n    tagGroups: allMarkdownRemark {\n      group(field: frontmatter___tags) {\n        name: fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}