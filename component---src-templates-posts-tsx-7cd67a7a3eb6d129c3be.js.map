{"version":3,"sources":["webpack:///./src/components/icons/leftArrowIcon.tsx","webpack:///./src/components/icons/rightArrowIcon.tsx","webpack:///./src/components/pager.tsx","webpack:///./src/components/posts.tsx","webpack:///./src/templates/posts.tsx","webpack:///./src/components/postmeta.tsx"],"names":["LeftArrowIcon","size","height","width","viewBox","fill","xmlns","d","fillRule","clipRule","RightArrowIcon","PagerStyledWrapper","theme","flexBox","colors","black_inactive","PageLinkButton","children","className","to","Pager","previousPagePath","nextPagePath","PostsStyledWrapper","primary_border","Posts","posts","map","post","node","key","id","fields","slug","frontmatter","title","postDate","date","timeToRead","excerpt","PostsTemplate","data","allMarkdownRemark","edges","pageContext","PostmetaStyledWrapper","Postmeta","DateTime","fromISO","toFormat"],"mappings":"mLAIaA,EAA6C,SAAC,GAAD,QAAGC,YAAH,MAAU,GAAV,SACxD,mBACEC,OAAQD,EACRE,MAAOF,EACPG,QAAO,OAASH,EAAT,IAAiBA,EACxBI,KAAK,OACLC,MAAM,8BAEN,oBACEC,EAAE,2HACFF,KAAK,eACLG,SAAS,UACTC,SAAS,cCZFC,EAA8C,SAAC,GAAD,QAAGT,YAAH,MAAU,GAAV,SACzD,mBACEC,OAAQD,EACRE,MAAOF,EACPG,QAAO,OAASH,EAAT,IAAiBA,EACxBI,KAAK,OACLC,MAAM,8BAEN,oBACEC,EAAE,6HACFF,KAAK,eACLG,SAAS,UACTC,SAAS,cCOTE,EAAqB,kBAAH,oBAAG,EACvB,qBAAGC,MAAkBC,QAAQ,mBADT,gCAMhB,qBAAGD,MAAkBC,YANL,mDAWT,qBAAGD,MAAkBE,OAAOC,iBAXnB,yBAmBlBC,EAAoD,SAAC,GAIrD,IAHJC,EAGI,EAHJA,SAGI,IAFJC,iBAEI,MAFQ,GAER,EADJC,EACI,EADJA,GAEA,OAAOA,EACL,YAAC,IAAD,CAAMA,GAAIA,EAAID,UAAWA,GACtBD,GAGH,oBAAMC,UAAWA,GAAYD,IAIpBG,EAAkC,SAAC,GAAD,IAC7CC,EAD6C,EAC7CA,iBACAC,EAF6C,EAE7CA,aAF6C,OAI7C,YAACX,EAAD,KACE,sBACE,YAAC,EAAD,CACEO,UAAWG,EAAmB,SAAW,WACzCF,GAAIE,GAEJ,YAAC,EAAD,MAJF,aAQF,sBACE,YAAC,EAAD,CACEH,UAAWI,EAAe,SAAW,WACrCH,GAAIG,GAFN,OAKE,YAAC,EAAD,W,sIClDFC,EAAqB,kBAAH,oBAAG,CAAH,gCAEO,qBAAGX,MAAkBE,OAAOU,iBAFnC,yHAmBXC,EAAkC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAC7C,YAACH,EAAD,KACGG,EAAMC,KAAI,gBAASC,EAAT,EAAGC,KAAH,OACT,kBAAIC,IAAKF,EAAKG,IACZ,sBACE,YAAC,IAAD,CAAMZ,GAAIS,EAAKI,OAAOC,MAAOL,EAAKM,YAAYC,QAEhD,YAAC,IAAD,CAAUC,SAAUR,EAAKI,OAAOK,KAAMC,WAAYV,EAAKU,aACtDV,EAAKW,SAAW,qBAAIX,EAAKW,gB,kCCrDlC,iFAoDeC,UAjCwC,SAAC,GAAD,IAEvBd,EAFuB,EACrDe,KACEC,kBAAqBC,MAEvBC,EAJqD,EAIrDA,YAJqD,OAMrD,YAAC,IAAD,KACE,YAAC,IAAD,CAAKT,MAAM,eACX,YAAC,IAAD,CAAOT,MAAOA,IACd,YAAC,IAAD,CACEJ,aAAcsB,EAAYtB,aAC1BD,iBAAkBuB,EAAYvB,sB,wHCnB9BwB,EAAwB,mBAAH,oBAAG,CAAH,gBAEd,qBAAGjC,MAAkBE,OAAOC,iBAFd,sEAWd+B,EAAwC,SAAC,GAAD,IACnDV,EADmD,EACnDA,SACAE,EAFmD,EAEnDA,WAFmD,OAInD,YAACO,EAAD,KACE,wBAAOE,WAASC,QAAQZ,GAAUa,SAAS,QAC3C,oBAAM/B,UAAU,aAAhB,KACA,wBAAOoB,EAAP","file":"component---src-templates-posts-tsx-7cd67a7a3eb6d129c3be.js","sourcesContent":["import React from 'react';\n\nimport { BaseIconPropsType } from './types';\n\nexport const LeftArrowIcon: React.FC<BaseIconPropsType> = ({ size = 15 }) => (\n  <svg\n    height={size}\n    width={size}\n    viewBox={`0 0 ${size} ${size}`}\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M8.842 3.135a.5.5 0 01.023.707L5.435 7.5l3.43 3.658a.5.5 0 01-.73.684l-3.75-4a.5.5 0 010-.684l3.75-4a.5.5 0 01.707-.023z\"\n      fill=\"currentColor\"\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n","import React from 'react';\n\nimport { BaseIconPropsType } from './types';\n\nexport const RightArrowIcon: React.FC<BaseIconPropsType> = ({ size = 15 }) => (\n  <svg\n    height={size}\n    width={size}\n    viewBox={`0 0 ${size} ${size}`}\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M6.158 3.135a.5.5 0 01.707.023l3.75 4a.5.5 0 010 .684l-3.75 4a.5.5 0 11-.73-.684L9.566 7.5l-3.43-3.658a.5.5 0 01.023-.707z\"\n      fill=\"currentColor\"\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nimport { LeftArrowIcon } from './icons/leftArrowIcon';\nimport { RightArrowIcon } from './icons/rightArrowIcon';\nimport { ThemeProps } from '../lib/theme';\n\nexport interface NodeType {\n  id: string;\n  slug: string;\n}\n\ninterface PageLinkButtonPropsType {\n  className?: string;\n  to?: string;\n}\n\nexport interface PagerPropsType {\n  nextPagePath: string;\n  previousPagePath: string;\n}\n\nconst PagerStyledWrapper = styled.ul<ThemeProps>`\n  ${({ theme }) => theme.flexBox('space-between')};\n  margin: 2rem 0;\n  > li {\n    > a,\n    > span {\n      ${({ theme }) => theme.flexBox()};\n      font-size: 0.9rem;\n      font-weight: 700;\n    }\n    > span {\n      color: ${({ theme }) => theme.colors.black_inactive};\n      > svg {\n        opacity: 0.5;\n      }\n    }\n  }\n`;\n\nconst PageLinkButton: React.FC<PageLinkButtonPropsType> = ({\n  children,\n  className = '',\n  to,\n}) => {\n  return to ? (\n    <Link to={to} className={className}>\n      {children}\n    </Link>\n  ) : (\n    <span className={className}>{children}</span>\n  );\n};\n\nexport const Pager: React.FC<PagerPropsType> = ({\n  previousPagePath,\n  nextPagePath,\n}) => (\n  <PagerStyledWrapper>\n    <li>\n      <PageLinkButton\n        className={previousPagePath ? 'active' : 'disabled'}\n        to={previousPagePath}\n      >\n        <LeftArrowIcon />\n        Previous\n      </PageLinkButton>\n    </li>\n    <li>\n      <PageLinkButton\n        className={nextPagePath ? 'active' : 'disabled'}\n        to={nextPagePath}\n      >\n        Next\n        <RightArrowIcon />\n      </PageLinkButton>\n    </li>\n  </PagerStyledWrapper>\n);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Link, graphql } from 'gatsby';\n\nimport { Postmeta } from './postmeta';\nimport { ThemeProps } from '../lib/theme';\n\nexport interface PostListItemType {\n  excerpt: string;\n  fields: {\n    date: string;\n    slug: string;\n  };\n  frontmatter: {\n    title: string;\n  };\n  id: string;\n  timeToRead: number;\n}\n\nexport interface PostsPropsType {\n  posts: Array<{\n    node: PostListItemType;\n  }>;\n}\n\nconst PostsStyledWrapper = styled.ul<ThemeProps>`\n  > li {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.primary_border};\n    padding: 1rem 0;\n    &:first-of-type {\n      padding-top: 0;\n    }\n    &:last-child {\n      border: none;\n    }\n    > h4 {\n      font-size: 1.25rem;\n    }\n    > p {\n      margin-top: 1rem;\n    }\n  }\n`;\n\nexport const Posts: React.FC<PostsPropsType> = ({ posts }) => (\n  <PostsStyledWrapper>\n    {posts.map(({ node: post }) => (\n      <li key={post.id}>\n        <h4>\n          <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\n        </h4>\n        <Postmeta postDate={post.fields.date} timeToRead={post.timeToRead} />\n        {post.excerpt && <p>{post.excerpt}</p>}\n      </li>\n    ))}\n  </PostsStyledWrapper>\n);\n\nexport const query = graphql`\n  fragment PostList on MarkdownRemark {\n    fields {\n      date\n      slug\n    }\n    frontmatter {\n      title\n    }\n    id\n    excerpt(pruneLength: 200)\n    timeToRead\n  }\n`;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport { Layout } from '../components/common/layout';\nimport { Pager, PagerPropsType } from '../components/pager';\nimport { PostListItemType, Posts } from '../components/posts';\nimport { SEO } from '../components/seo';\n\ninterface PostsTemplatePropType {\n  data: {\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PostListItemType;\n      }>;\n    };\n  };\n  pageContext: PagerPropsType;\n}\n\nconst PostsTemplate: React.FC<PostsTemplatePropType> = ({\n  data: {\n    allMarkdownRemark: { edges: posts },\n  },\n  pageContext,\n}) => (\n  <Layout>\n    <SEO title=\"Blog posts\" />\n    <Posts posts={posts} />\n    <Pager\n      nextPagePath={pageContext.nextPagePath}\n      previousPagePath={pageContext.previousPagePath}\n    />\n  </Layout>\n);\n\nexport const pageQuery = graphql`\n  query($skip: Int!, $limit: Int!, $ids: [String!]) {\n    allMarkdownRemark(\n      filter: { id: { in: $ids } }\n      sort: { fields: [fields___date], order: DESC }\n      skip: $skip\n      limit: $limit\n    ) {\n      edges {\n        node {\n          ...PostList\n        }\n      }\n    }\n  }\n`;\n\nexport default PostsTemplate;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { DateTime } from 'luxon';\n\nimport { ThemeProps } from '../lib/theme';\n\ninterface PostmetaPropsType {\n  postDate: string;\n  timeToRead: number;\n}\n\nconst PostmetaStyledWrapper = styled.div<ThemeProps>`\n  > span {\n    color: ${({ theme }) => theme.colors.black_inactive};\n    font-size: 0.75rem;\n    font-weight: 700;\n    &.separator {\n      padding: 0 0.5rem;\n    }\n  }\n`;\n\nexport const Postmeta: React.FC<PostmetaPropsType> = ({\n  postDate,\n  timeToRead,\n}) => (\n  <PostmetaStyledWrapper>\n    <span>{DateTime.fromISO(postDate).toFormat('DDD')}</span>\n    <span className=\"separator\">|</span>\n    <span>{timeToRead} minute read</span>\n  </PostmetaStyledWrapper>\n);\n"],"sourceRoot":""}